#! /usr/bin/env bash

SRC="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

declare -ga MSG=()
declare -ga CLEANUP=("put_msg")

CONFIG=~/.config/justenv
mkdir -p $CONFIG
[[ -f $CONFIG/config ]] && . $CONFIG/config

CONFIG_PATH=${CONFIG_PATH:-"$HOME/configs"}
OLD=$CONFIG/oldconfigs
mkdir -p $CONFIG_PATH
mkdir -p $OLD

JGET=$SRC/jget

usage() {
    echo "Usage: $0 install | deploy [config_item] | remove"
}

has_func() {
    declare -f $_func > /dev/null
    return $?
}

put_file() {
    mkdir -p $(dirname "$2") && cp "$1" "$2"
}

check_append() {
    grep -qxsF -- "$1" "$2" || echo "$1" >> "$2"
}

remove_line() {
    grep -v "$1" "$2" > temp && mv temp "$2"
}

# display messages
put_msg() {
    for msg in "${MSG[@]}"; do
        echo $msg
    done
}

clean_up() {
	echo cleanup
    for tsk in "${CLEANUP[@]}"; do
        $tsk
    done
}

parse_ostype() {
    if [[ "$OSTYPE" == "linux-gnu" ]]; then
        ostype=linux
        if [ -f /etc/os-release ]; then
            . /etc/os-release
            OS=$ID
            OSVER=$VERSION_ID
        else
            MSG+=("Failed: linux distro not recognized.")
            return 1
        fi
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        OS=macos
        ostype=darwin
    else
        MSG+=("Failed: OS type $OSTYPE not supported.")
        return 1
    fi
}

modules_install() {
    jenv_install -s prereq update build

    [[ $zsh == "y" ]] &&  jenv_install zsh OMZ
    [[ $zsh == "r" ]] && jenv_install -f zsh OMZ

    [[ $nvim == "y" ]] &&  jenv_install nvim vim-plug node ctags ag
    [[ $nvim == "r" ]] && jenv_install -f nvim vim-plug node ctags ag

    [[ $tmux == "y" ]] &&  jenv_install tmux -f tpm
    [[ $tmux == "r" ]] && jenv_install -f tmux tpm
}

deploy_configs() {
    while read src dst
    do
        dst=${dst/#~/$HOME}
        src=${src/\$OS/$OS}
        dst=${dst/\$OS/$OS}
        dstdir=`dirname "$dst"`
        dstname=`basename "$dst"`
        [[ -f $dst ]] && cp $dst "$OLD/$dstname.old"
        [[ $dst == */ ]] && mkdir -p $dst || mkdir -p $dstdir
        ln -sf $CONFIG_PATH/${src} ${dst}
        echo "softlink ${src} to ${dst}"
    done <"$CONFIG_PATH/deploy_path"
}

do_install() {
    . $JGET/jget.sh

    jget_install $@
}

do_uninstall() {
    . $JGET/jget.sh
    jget_remove $@
}

do_deploy() {
    parse_ostype
    if [[ $# -gt 0 ]]; then
        if has_func deploy_$1 ; then
            deploy_$1 
            echo "Justenv deploy_$1"
        else 
            echo "No deployable config for $1"
        fi
    else
        MSG+=(">>> deploying configs")
        cd $CONFIG_PATH
        deploy_configs
        [[ -f $CONFIG_PATH/after_deploy.sh ]] && . $CONFIG_PATH/after_deploy.sh && MSG+=(">>> exec after_deploy")
    fi
}

do_test() {
    deploy_other
}

_get_justenv() {
    cp $JUSTENV_SRC/justenv $BIN
    cp -rf $JUSTENV_SRC/jget $BIN
}

_get_update() {
    cd $BUILD
    git clone https://github.com/Keitokuch/justenv.git
    JUSTENV_SRC=justenv/src
    _get_justenv
}


main() {
    opt=$1
    shift
    case $opt in
        install)
            do_install $@
            ;;
        setup)
            modules_install
            do_deploy
            [[ "$zsh" =~  ^(y|r)$ ]] && zsh
            ;;
        deploy)
            do_deploy $@
            ;;
        remove)
            do_uninstall $@
            ;;
        test)
            do_test $@
            ;;
        func)
            . $JGET/jget.sh
            $@
            echo $?
            ;;
        install_justenv)
            JUSTENV_SRC=$SRC
            do_install -f justenv
            ;;
        update)
            do_install -f update
            ;;
        *)
            usage
            exit 0
            ;;
    esac
    clean_up
}

main $@
